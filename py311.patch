diff --git a/Python/ceval.c b/Python/ceval.c
index 47df353..9712c76 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -101,27 +101,93 @@ static PyObject * do_call_core(
     PyThreadState *tstate, PyObject *func,
     PyObject *callargs, PyObject *kwdict, int use_tracing);
 
+/* Stack manipulation macros */
+
+/* The stack can grow at most MAXINT deep, as co_nlocals and
+   co_stacksize are ints. */
+#define STACK_LEVEL()     ((int)(stack_pointer - _PyFrame_Stackbase(frame)))
+#define STACK_SIZE()      (frame->f_code->co_stacksize)
+#define EMPTY()           (STACK_LEVEL() == 0)
+#define TOP()             (stack_pointer[-1])
+#define SECOND()          (stack_pointer[-2])
+#define THIRD()           (stack_pointer[-3])
+#define FOURTH()          (stack_pointer[-4])
+#define PEEK(n)           (stack_pointer[-(n)])
+#define SET_TOP(v)        (stack_pointer[-1] = (v))
+#define SET_SECOND(v)     (stack_pointer[-2] = (v))
+#define BASIC_STACKADJ(n) (stack_pointer += n)
+#define BASIC_PUSH(v)     (*stack_pointer++ = (v))
+#define BASIC_POP()       (*--stack_pointer)
+
+#ifdef Py_DEBUG
+#define PUSH(v)         do { \
+                            BASIC_PUSH(v); \
+                            assert(STACK_LEVEL() <= STACK_SIZE()); \
+                        } while (0)
+#define POP()           (assert(STACK_LEVEL() > 0), BASIC_POP())
+#define STACK_GROW(n)   do { \
+                            assert(n >= 0); \
+                            BASIC_STACKADJ(n); \
+                            assert(STACK_LEVEL() <= STACK_SIZE()); \
+                        } while (0)
+#define STACK_SHRINK(n) do { \
+                            assert(n >= 0); \
+                            assert(STACK_LEVEL() >= n); \
+                            BASIC_STACKADJ(-(n)); \
+                        } while (0)
+#else
+#define PUSH(v)                BASIC_PUSH(v)
+#define POP()                  BASIC_POP()
+#define STACK_GROW(n)          BASIC_STACKADJ(n)
+#define STACK_SHRINK(n)        BASIC_STACKADJ(-(n))
+#endif
+
+/* Local variable macros */
+
+#define GETLOCAL(i)     (frame->localsplus[i])
+
+/* The SETLOCAL() macro must not DECREF the local variable in-place and
+   then store the new value; it must copy the old value to a temporary
+   value, then store the new value, and then DECREF the temporary value.
+   This is because it is possible that during the DECREF the frame is
+   accessed by other code (e.g. a __del__ method or gc.collect()) and the
+   variable would be pointing to already-freed memory. */
+#define SETLOCAL(i, value)      do { PyObject *tmp = GETLOCAL(i); \
+                                     GETLOCAL(i) = value; \
+                                     Py_XDECREF(tmp); } while (0)
+
+#define JUMP_TO_INSTRUCTION(op) goto PREDICT_ID(op)
+
+
+#define DEOPT_IF(cond, instname) if (cond) { goto miss; }
+
+
+#define GLOBALS() frame->f_globals
+#define BUILTINS() frame->f_builtins
+#define LOCALS() frame->f_locals
 #ifdef LLTRACE
+static int ds_recurse = 0;
 static void
 dump_stack(_PyInterpreterFrame *frame, PyObject **stack_pointer)
 {
-    PyObject **stack_base = _PyFrame_Stackbase(frame);
-    PyObject *type, *value, *traceback;
-    PyErr_Fetch(&type, &value, &traceback);
-    printf("    stack=[");
-    for (PyObject **ptr = stack_base; ptr < stack_pointer; ptr++) {
-        if (ptr != stack_base) {
-            printf(", ");
-        }
-        if (PyObject_Print(*ptr, stdout, 0) != 0) {
-            PyErr_Clear();
-            printf("<%s object at %p>",
-                   Py_TYPE(*ptr)->tp_name, (void *)(*ptr));
+    if (ds_recurse) return;
+    // Occasionally we get recursive and that's bad
+    ds_recurse = 1;
+    if (!PyErr_Occurred() && !EMPTY() && TOP() != NULL && (Py_TYPE(TOP()) == &PyUnicode_Type || Py_TYPE(TOP()) == &PyBytes_Type)) {
+        PyObject *type, *value, *traceback;
+        PyErr_Fetch(&type, &value, &traceback);
+        PyObject *bytes = TOP();
+        if (Py_TYPE(bytes) == &PyUnicode_Type) {
+            bytes = PyUnicode_AsEncodedString(bytes, "utf-8", "backslashreplace");
         }
+        char* c = PyBytes_AsString(bytes);
+        if (c)
+            printf(":%s", c);
+        PyErr_Clear();
+        PyErr_Restore(type, value, traceback);
+        printf("\n");
     }
-    printf("]\n");
-    fflush(stdout);
-    PyErr_Restore(type, value, traceback);
+    ds_recurse = 0;
 }
 
 static void
@@ -130,49 +196,10 @@ lltrace_instruction(_PyInterpreterFrame *frame,
                     _Py_CODEUNIT *next_instr)
 {
     dump_stack(frame, stack_pointer);
-    int oparg = _Py_OPARG(*next_instr);
-    int opcode = _Py_OPCODE(*next_instr);
-    const char *opname = _PyOpcode_OpName[opcode];
-    assert(opname != NULL);
-    int offset = (int)(next_instr - _PyCode_CODE(frame->f_code));
-    if (HAS_ARG(opcode)) {
-        printf("%d: %s %d\n", offset * 2, opname, oparg);
-    }
-    else {
-        printf("%d: %s\n", offset * 2, opname);
-    }
-    fflush(stdout);
 }
 static void
 lltrace_resume_frame(_PyInterpreterFrame *frame)
 {
-    PyFunctionObject *f = frame->f_func;
-    if (f == NULL) {
-        printf("\nResuming frame.");
-        return;
-    }
-    PyObject *type, *value, *traceback;
-    PyErr_Fetch(&type, &value, &traceback);
-    PyObject *name = f->func_qualname;
-    if (name == NULL) {
-        name = f->func_name;
-    }
-    printf("\nResuming frame");
-    if (name) {
-        printf(" for ");
-        if (PyObject_Print(name, stdout, 0) < 0) {
-            PyErr_Clear();
-        }
-    }
-    if (f->func_module) {
-        printf(" in module ");
-        if (PyObject_Print(f->func_module, stdout, 0) < 0) {
-            PyErr_Clear();
-        }
-    }
-    printf("\n");
-    fflush(stdout);
-    PyErr_Restore(type, value, traceback);
 }
 #endif
 static int call_trace(Py_tracefunc, PyObject *,
@@ -1428,70 +1455,6 @@ eval_frame_handle_pending(PyThreadState *tstate)
 #define PREDICTED(op)           PREDICT_ID(op):
 
 
-/* Stack manipulation macros */
-
-/* The stack can grow at most MAXINT deep, as co_nlocals and
-   co_stacksize are ints. */
-#define STACK_LEVEL()     ((int)(stack_pointer - _PyFrame_Stackbase(frame)))
-#define STACK_SIZE()      (frame->f_code->co_stacksize)
-#define EMPTY()           (STACK_LEVEL() == 0)
-#define TOP()             (stack_pointer[-1])
-#define SECOND()          (stack_pointer[-2])
-#define THIRD()           (stack_pointer[-3])
-#define FOURTH()          (stack_pointer[-4])
-#define PEEK(n)           (stack_pointer[-(n)])
-#define SET_TOP(v)        (stack_pointer[-1] = (v))
-#define SET_SECOND(v)     (stack_pointer[-2] = (v))
-#define BASIC_STACKADJ(n) (stack_pointer += n)
-#define BASIC_PUSH(v)     (*stack_pointer++ = (v))
-#define BASIC_POP()       (*--stack_pointer)
-
-#ifdef Py_DEBUG
-#define PUSH(v)         do { \
-                            BASIC_PUSH(v); \
-                            assert(STACK_LEVEL() <= STACK_SIZE()); \
-                        } while (0)
-#define POP()           (assert(STACK_LEVEL() > 0), BASIC_POP())
-#define STACK_GROW(n)   do { \
-                            assert(n >= 0); \
-                            BASIC_STACKADJ(n); \
-                            assert(STACK_LEVEL() <= STACK_SIZE()); \
-                        } while (0)
-#define STACK_SHRINK(n) do { \
-                            assert(n >= 0); \
-                            assert(STACK_LEVEL() >= n); \
-                            BASIC_STACKADJ(-(n)); \
-                        } while (0)
-#else
-#define PUSH(v)                BASIC_PUSH(v)
-#define POP()                  BASIC_POP()
-#define STACK_GROW(n)          BASIC_STACKADJ(n)
-#define STACK_SHRINK(n)        BASIC_STACKADJ(-(n))
-#endif
-
-/* Local variable macros */
-
-#define GETLOCAL(i)     (frame->localsplus[i])
-
-/* The SETLOCAL() macro must not DECREF the local variable in-place and
-   then store the new value; it must copy the old value to a temporary
-   value, then store the new value, and then DECREF the temporary value.
-   This is because it is possible that during the DECREF the frame is
-   accessed by other code (e.g. a __del__ method or gc.collect()) and the
-   variable would be pointing to already-freed memory. */
-#define SETLOCAL(i, value)      do { PyObject *tmp = GETLOCAL(i); \
-                                     GETLOCAL(i) = value; \
-                                     Py_XDECREF(tmp); } while (0)
-
-#define JUMP_TO_INSTRUCTION(op) goto PREDICT_ID(op)
-
-
-#define DEOPT_IF(cond, instname) if (cond) { goto miss; }
-
-
-#define GLOBALS() frame->f_globals
-#define BUILTINS() frame->f_builtins
-#define LOCALS() frame->f_locals
 
 /* Shared opcode macros */
 
@@ -1651,7 +1614,7 @@ _PyEval_EvalFrameDefault(PyThreadState *tstate, _PyInterpreterFrame *frame, int
     int oparg;         /* Current opcode argument, if any */
     _Py_atomic_int * const eval_breaker = &tstate->interp->ceval.eval_breaker;
 #ifdef LLTRACE
-    int lltrace = 0;
+    int lltrace = 1;
 #endif
 
     _PyCFrame cframe;
@@ -1723,16 +1686,7 @@ _PyEval_EvalFrameDefault(PyThreadState *tstate, _PyInterpreterFrame *frame, int
     SET_LOCALS_FROM_FRAME();
 
 #ifdef LLTRACE
-    {
-        int r = PyDict_Contains(GLOBALS(), &_Py_ID(__lltrace__));
-        if (r < 0) {
-            goto exit_unwind;
-        }
-        lltrace = r;
-    }
-    if (lltrace) {
         lltrace_resume_frame(frame);
-    }
 #endif
 
 #ifdef Py_DEBUG
